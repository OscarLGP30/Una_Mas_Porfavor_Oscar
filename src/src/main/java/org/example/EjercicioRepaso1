

static final double N = 2; static final double PREC = 1e-6;
static double f (double x)
{ return x*x-N; }
static double bisect (double min, double max) { double med = (min+max)/2;
if (max-min<PREC) { return med;
} else if (f(min)*f(med)<0) { return bisect (min,med);
} else {
return bisect (med,max); }}

a)

//¿Qué calcula la llamada a la función recursiva bisect(0,N)?\\
La función recursiva bisect(0,N) calcula la raíz cuadrada de N.

//Si cambiamos el valor de N, ¿qué estaríamos calculando?\\
Estaria calculando la raiz cuadrada de el valor por el que se cambie N.


//¿Y si cambiásemos la función f(x)?\\
si la funcion f(x) cambia, se cambiaria el valor de la raiz cuadrada de N.

//b) Implemente un algoritmo iterativo equivalente.\\
static double bisect (double min, double max) { double med = (min+max)/2;
while (max-min>PREC) { if (f(min)*f(med)<0) { max=med;
} else { min=med; } med = (min+max)/2; } return med; }



